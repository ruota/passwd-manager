#!/bin/bash
#########################################
# @author Aruota
# @brief Password manager
# @version 1.0
# @licence gpl2
#########################################

function getPass {
	echo -n Password:
	read -s password
	echo
	__=$password
}

function encrypt {
	openssl aes-256-cbc -a -salt -in $1.tmp -out $1 -pass pass:$2 2> /dev/null
	res="$?"
	# push openssl version
	echo "$(openssl version)" >> $1
	return $res
}

function decrypt {
	dbSsl=$(grep -i "openssl" $1)
	# check openssl version
	if [ ! "$dbSsl" == "" ]
	then 
		if [ ! "$dbSsl" == "$(openssl version)" ]
		then
			echo "Warning - PASSDB ssl: $dbSsl sys ssl: $(openssl version)"
		fi
		# pop openssl version
		sed -i .bak '$ d' $1
	else
		echo "Warning - PASSDB: no openssl version"
	fi
	openssl aes-256-cbc -d -a -in $1 -out $1.tmp -pass pass:$2 2> /dev/null
	res="$?"
	# push openssl version
	echo "$dbSsl" >> $1
	return $res
}

function error {
	echo "Error: $1"
}

if [ ! -e "/usr/bin/openssl" ]
then
	error "passwd-manager require openssl"
	exit 1
else
	openssl version
fi

# check if password db path exists
if [ ! -e $PASSDB ]
then
	if [ "$1" == "--init" ]
	then
		if [ ! -e $PASSDB.tmp ]
		then
			touch $PASSDB.tmp
		fi
		getPass || password=$1
		encrypt $PASSDB $password
		if [ $? -eq 0 ]
		then
			echo "DONE -> created"
		else
			error "encrypt"
		fi
	else
		error "invalid PASSDB"
	fi

elif [ "$1" == "--insert" ]
then
	getPass || password=$1
	decrypt $PASSDB $password
	if [ $? -eq 0 ] 
	then
		res=$(grep $2 $PASSDB.tmp)
		if [ "$res" == "" ]
		then
			echo "$2 $3" >> $PASSDB.tmp
			encrypt $PASSDB $password
			if [ $? -eq 0 ]
			then
				echo "DONE -> added"
			else
				error "encrypt"
			fi
		else
			error "user exists"
		fi	
		rm $PASSDB.tmp 2> /dev/null
	else
		error "password"
	fi

elif [ "$1" == "--show" ]
then
	getPass || password=$1
	decrypt $PASSDB $password
	if [ $? -eq 0 ] 
	then
		if [ "$2" == "all" ]
		then
			cat $PASSDB.tmp	
		else
           		grep $2 $PASSDB.tmp > $PASSDB.tmp2
			cat $PASSDB.tmp2
			
			if [[ $(wc -l < $PASSDB.tmp2) -eq 1 ]]
			then 
				echo -n "Copy Clipboard? (y,n)  "
				read -n 1 res
				if [ $res == "y" ]
				then
					cat $PASSDB.tmp2 | awk '{ print $NF }' | pbcopy
				fi
				echo
			fi
		fi
	else
		error "password"
	fi
	rm $PASSDB.tmp 2> /dev/null	
	rm $PASSDB.tmp2 2> /dev/null

elif [ "$1" == "--remove" ]
then
	getPass || password=$1
	decrypt $PASSDB $password
	if [ $? -eq 0 ] 
	then
		sed -i .bak "/$2/d" $PASSDB.tmp
		encrypt $PASSDB $password
		if [ $? -eq 0 ]
		then
			echo "DONE -> removed"
		else
			error "encrypt"
		fi
		rm $PASSDB.tmp.bak 2> /dev/null
	else
		error "password"
	fi
	rm $PASSDB.tmp 2> /dev/null

elif [ "$1" == "--password" ]
then
	echo "Insert Old Password:"
	getPass || password=$1
	decrypt $PASSDB $password
	if [ $? -eq 0 ]
	then
		echo "Insert New Password:"
		getPass || password=$1
		encrypt $PASSDB $password
	 	if [ $? -eq 0 ]
		then
			echo "DONE -> changed"
		else
			error "new password"
		fi
	else
		error "old password"
	fi
	rm $PASSDB.tmp 2> /dev/null

else
	# help
	echo "passwd-manager PASSDB=<password db> option"
	echo "options:"
	echo "    --init"	
	echo "    --insert <user> <password>"
	echo "    --remove <user>"
	echo "    --show <user | all>"
	echo "    --password"
fi
